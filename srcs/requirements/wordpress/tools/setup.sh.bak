#!/bin/bash

# Set default domain if not provided
if [ -z "$DOMAIN_NAME" ]; then
    echo "Warning: DOMAIN_NAME not set, defaulting to localhost"
    export DOMAIN_NAME="localhost"
fi

echo "Configuring WordPress for domain: $DOMAIN_NAME"

# Find the PHP version installed
PHP_VERSION=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;')
echo "Detected PHP version: $PHP_VERSION"

# Add hosts entries for internal container networking
echo "127.0.0.1 localhost" >> /etc/hosts
echo "127.0.0.1 $DOMAIN_NAME" >> /etc/hosts
echo "$WORDPRESS_DB_HOST mariadb" >> /etc/hosts

# Wait for MariaDB to be ready with a more robust check
echo "Waiting for MariaDB to be ready..."
for i in {1..60}; do
    if mysqladmin ping -h "$WORDPRESS_DB_HOST" --silent; then
        echo "Database is ready!"
        break
    fi
    echo "Waiting for MariaDB to be ready... ($i/60) - Trying to connect to $WORDPRESS_DB_HOST"
    # Diagnostic: Check if we can resolve the hostname
    getent hosts "$WORDPRESS_DB_HOST" || echo "Cannot resolve $WORDPRESS_DB_HOST"
    # Try to ping mariadb container
    ping -c 1 "$WORDPRESS_DB_HOST" || echo "Cannot ping $WORDPRESS_DB_HOST"
    sleep 5
    if [ $i -eq 60 ]; then
        echo "Could not connect to database after 60 attempts. Will try to proceed anyway..."
    fi
done

# Configure PHP-FPM to listen on all interfaces with specific PHP version
echo "Configuring PHP-FPM..."
PHP_FPM_CONF="/etc/php/$PHP_VERSION/fpm/pool.d/www.conf"
echo "PHP-FPM configuration file: $PHP_FPM_CONF"

if [ -f "$PHP_FPM_CONF" ]; then
    sed -i 's|.*listen =.*|listen = 0.0.0.0:9000|g' "$PHP_FPM_CONF"
    sed -i 's|.*listen.allowed_clients.*|listen.allowed_clients = any|g' "$PHP_FPM_CONF"
    sed -i 's|.*pm.status_path.*|pm.status_path = /status|g' "$PHP_FPM_CONF"
    sed -i 's|.*pm.max_children.*|pm.max_children = 20|g' "$PHP_FPM_CONF"
    sed -i 's|.*pm.start_servers.*|pm.start_servers = 5|g' "$PHP_FPM_CONF"
    sed -i 's|.*pm.min_spare_servers.*|pm.min_spare_servers = 3|g' "$PHP_FPM_CONF"
    sed -i 's|.*pm.max_spare_servers.*|pm.max_spare_servers = 10|g' "$PHP_FPM_CONF"
    # Add logging directive for debugging
    grep -q "catch_workers_output" "$PHP_FPM_CONF" && \
        sed -i 's|.*;catch_workers_output.*|catch_workers_output = yes|g' "$PHP_FPM_CONF" || \
        echo "catch_workers_output = yes" >> "$PHP_FPM_CONF"
    grep -q "php_admin_flag[log_errors]" "$PHP_FPM_CONF" || \
        echo "php_admin_flag[log_errors] = on" >> "$PHP_FPM_CONF"
    grep -q "php_admin_value[error_log]" "$PHP_FPM_CONF" || \
        echo "php_admin_value[error_log] = /var/log/fpm-php.www.log" >> "$PHP_FPM_CONF"

    echo "PHP-FPM configured successfully"
else
    echo "ERROR: PHP-FPM configuration file not found: $PHP_FPM_CONF"
    # Fallback: Try to use the copied www.conf file
    if [ -f "/etc/php/*/fpm/pool.d/www.conf" ]; then
        echo "Using fallback PHP-FPM configuration"
        sed -i 's|.*listen =.*|listen = 0.0.0.0:9000|g' /etc/php/*/fpm/pool.d/www.conf
        sed -i 's|.*listen.allowed_clients.*|listen.allowed_clients = any|g' /etc/php/*/fpm/pool.d/www.conf
    fi
fi

# Function to properly format domain for WordPress
format_wp_domain() {
    local domain="$1"
    # If it's localhost, don't add https:// to avoid issues
    if [ "$domain" = "localhost" ]; then
        echo "http://localhost"
    else
        echo "https://$domain"
    fi
}

# Get properly formatted domain for WordPress
WP_DOMAIN=$(format_wp_domain "$DOMAIN_NAME")
echo "Using WordPress URL: $WP_DOMAIN"

# Create a dedicated log directory for WordPress
mkdir -p /var/log/wordpress
chown -R www-data:www-data /var/log/wordpress

# Create debug.log file and make it writable
touch /var/www/html/debug.log
chmod 666 /var/www/html/debug.log

# Create a networking test file
echo "<?php
    echo '<h1>WordPress Container Network Test</h1>';
    echo '<h2>Host Information</h2>';
    echo '<pre>';
    echo 'Server IP: ' . \$_SERVER['SERVER_ADDR'] . '<br>';
    echo 'Domain Name: ' . \$_SERVER['HTTP_HOST'] . '<br>';
    echo '</pre>';
    
    echo '<h2>Database Connection Test</h2>';
    \$dbhost = '${WORDPRESS_DB_HOST}';
    \$dbuser = '${WORDPRESS_DB_USER}';
    \$dbpass = '${WORDPRESS_DB_PASSWORD}';
    \$dbname = '${WORDPRESS_DB_NAME}';
    
    echo '<pre>';
    echo 'Attempting to connect to database on ' . \$dbhost . '...<br>';
    
    \$mysqli = @new mysqli(\$dbhost, \$dbuser, \$dbpass, \$dbname);
    
    if (\$mysqli->connect_error) {
        echo 'ERROR: Failed to connect to MySQL: ' . \$mysqli->connect_error . '<br>';
    } else {
        echo 'SUCCESS: Connected to MySQL server successfully!<br>';
        echo 'MySQL server info: ' . \$mysqli->server_info . '<br>';
        \$mysqli->close();
    }
    
    echo '</pre>';
    
    echo '<h2>DNS Resolution Test</h2>';
    echo '<pre>';
    echo 'Resolving mariadb: ' . gethostbyname('mariadb') . '<br>';
    echo 'Resolving wordpress: ' . gethostbyname('wordpress') . '<br>';
    echo 'Resolving ' . \$dbhost . ': ' . gethostbyname(\$dbhost) . '<br>';
    echo '</pre>';
?>" > /var/www/html/network-test.php
chmod 644 /var/www/html/network-test.php

# Check if WordPress is already installed
if [ ! -f /var/www/html/wp-config.php ]; then
    echo "WordPress not found, downloading..."
    # Download WordPress core files if not present
    if [ ! -f /var/www/html/wp-login.php ]; then
        wp core download --allow-root
    fi
    
    # Create wp-config.php with retry logic
    echo "Creating WordPress configuration..."
    for i in {1..5}; do
        if wp config create \
            --dbname="$WORDPRESS_DB_NAME" \
            --dbuser="$WORDPRESS_DB_USER" \
            --dbpass="$WORDPRESS_DB_PASSWORD" \
            --dbhost="$WORDPRESS_DB_HOST" \
            --allow-root; then
            
            # Add WP_HOME and WP_SITEURL constants to wp-config.php
            wp config set WP_HOME "$WP_DOMAIN" --allow-root
            wp config set WP_SITEURL "$WP_DOMAIN" --allow-root
            
            # Enable debugging
            wp config set WP_DEBUG true --allow-root
            wp config set WP_DEBUG_LOG true --allow-root
            wp config set WP_DEBUG_DISPLAY false --allow-root
            
            echo "WordPress configuration created successfully!"
            break
        fi
        echo "Failed to create wp-config.php, retrying... ($i/5)"
        sleep 3
    done
    
    # Install WordPress with retry logic
    echo "Installing WordPress..."
    for i in {1..5}; do
        if wp core install \
            --url="$WP_DOMAIN" \
            --title="Inception Project" \
            --admin_user="$WP_ADMIN_USER" \
            --admin_password="$WP_ADMIN_PASSWORD" \
            --admin_email="$WP_ADMIN_EMAIL" \
            --skip-email \
            --allow-root; then
            
            # Update site URL settings
            wp option update siteurl "$WP_DOMAIN" --allow-root
            wp option update home "$WP_DOMAIN" --allow-root
            
            echo "WordPress core installed successfully!"
            break
        fi
        echo "Failed to install WordPress core, retrying... ($i/5)"
        sleep 3
    done
    
    # Create additional regular user
    echo "Creating regular user..."
    wp user create "$WP_REGULAR_USER" "$WP_REGULAR_EMAIL" \
        --user_pass="$WP_REGULAR_PASSWORD" \
        --role=subscriber \
        --allow-root || true
    
    # Install and activate a basic theme to ensure the site looks good
    wp theme install twentytwentythree --activate --allow-root || true
    
    echo "WordPress setup completed successfully!"
else
    echo "WordPress already installed, checking configuration..."
    
    # Ensure WordPress has the correct configuration even if already installed
    if wp core is-installed --allow-root; then
        echo "Updating WordPress site URL to $WP_DOMAIN"
        
        # Update both database options and wp-config.php constants
        wp option update siteurl "$WP_DOMAIN" --allow-root
        wp option update home "$WP_DOMAIN" --allow-root
        
        # Check if constants exist and update them
        if ! wp config get WP_HOME --allow-root &>/dev/null; then
            wp config set WP_HOME "$WP_DOMAIN" --allow-root
            wp config set WP_SITEURL "$WP_DOMAIN" --allow-root
            wp config set WP_DEBUG true --allow-root
            wp config set WP_DEBUG_LOG true --allow-root
            wp config set WP_DEBUG_DISPLAY false --allow-root
        else
            # Update existing constants
            sed -i "s|define( *'WP_HOME' *, *'[^']*' *)|define('WP_HOME', '$WP_DOMAIN')|g" /var/www/html/wp-config.php
            sed -i "s|define( *'WP_SITEURL' *, *'[^']*' *)|define('WP_SITEURL', '$WP_DOMAIN')|g" /var/www/html/wp-config.php
        fi
    else
        echo "WordPress files exist but installation is incomplete. Configuring..."
        wp config create \
            --dbname="$WORDPRESS_DB_NAME" \
            --dbuser="$WORDPRESS_DB_USER" \
            --dbpass="$WORDPRESS_DB_PASSWORD" \
            --dbhost="$WORDPRESS_DB_HOST" \
            --skip-check \
            --force \
            --allow-root || true
            
        # Add WP_HOME and WP_SITEURL constants
        wp config set WP_HOME "$WP_DOMAIN" --allow-root
        wp config set WP_SITEURL "$WP_DOMAIN" --allow-root
        wp config set WP_DEBUG true --allow-root
        wp config set WP_DEBUG_LOG true --allow-root
        wp config set WP_DEBUG_DISPLAY false --allow-root
            
        wp core install \
            --url="$WP_DOMAIN" \
            --title="Inception Project" \
            --admin_user="$WP_ADMIN_USER" \
            --admin_password="$WP_ADMIN_PASSWORD" \
            --admin_email="$WP_ADMIN_EMAIL" \
            --skip-email \
            --allow-root || true
            
        # Update site URL settings
        wp option update siteurl "$WP_DOMAIN" --allow-root
        wp option update home "$WP_DOMAIN" --allow-root
    fi
fi

# Set correct permissions
chown -R www-data:www-data /var/www/html

# Create a test file to verify domain configuration
echo "<?php
echo '<h1>Domain Test</h1>';
echo '<p>Current domain: ' . \$_SERVER['HTTP_HOST'] . '</p>';
echo '<p>WP_HOME: ' . (defined('WP_HOME') ? WP_HOME : 'Not defined') . '</p>';
echo '<p>WP_SITEURL: ' . (defined('WP_SITEURL') ? WP_SITEURL : 'Not defined') . '</p>';
if (function_exists('get_option')) {
    echo '<p>Database siteurl: ' . get_option('siteurl') . '</p>';
    echo '<p>Database home: ' . get_option('home') . '</p>';
} else {
    echo '<p>WordPress functions not available</p>';
}
?>" > /var/www/html/domaintest.php
chmod 644 /var/www/html/domaintest.php

# Make sure PHP logs are writable
touch /var/log/fpm-php.www.log
chmod 666 /var/log/fpm-php.www.log

# Display confirmation message
echo "WordPress container is ready to serve content"
echo "PHP-FPM configuration: $PHP_FPM_CONF"
echo "WordPress URL: $WP_DOMAIN"
echo "Connection to database: $WORDPRESS_DB_HOST"

# Start PHP-FPM
echo "Starting PHP-FPM..."
php_fpm_path=$(find /usr/sbin -name "php-fpm*" | head -1)
echo "Using PHP-FPM binary: $php_fpm_path"
exec "$php_fpm_path" -F